"use strict";
/* eslint-disable @typescript-eslint/no-non-null-assertion */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.processProject = exports.generate = void 0;
var ts_morph_1 = require("ts-morph");
var GENERATED_WARNING = 'WARNING: Do not manually change this file.';
// -- Helpers --
function reportError(message) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
    }
    console.error.apply(console, __spread(["ERROR: " + message], args));
}
function lowerFirst(s) {
    var first_code_point = s.codePointAt(0);
    if (first_code_point === undefined)
        return s;
    var first_letter = String.fromCodePoint(first_code_point);
    return first_letter.toLowerCase() + s.substr(first_letter.length);
}
function findExportableNode(type) {
    var symbol = type.getSymbol();
    if (symbol === undefined) {
        return null;
    }
    return (symbol
        .getDeclarations()
        .reduce(function (acc, node) { return __spread(acc, [node], node.getAncestors()); }, [])
        .filter(ts_morph_1.Node.isExportableNode)
        .find(function (n) { return n.isExported(); }) || null);
}
function typeToDependency(type, addDependency) {
    var exportable = findExportableNode(type);
    if (exportable === null) {
        return;
    }
    var sourceFile = exportable.getSourceFile();
    var name = exportable.getSymbol().getName();
    var isDefault = exportable.isDefaultExport();
    if (!exportable.isExported()) {
        reportError(name + " is not exported from " + sourceFile.getFilePath());
    }
    addDependency(sourceFile, name, isDefault);
}
function outFilePath(sourcePath, guardFileName) {
    var outPath = sourcePath.replace(/\.(ts|tsx|d\.ts)$/, "." + guardFileName + ".ts");
    if (outPath === sourcePath)
        throw new Error('Internal Error: sourcePath and outFilePath are identical: ' + outPath);
    return outPath;
}
function deleteGuardFile(sourceFile) {
    if (sourceFile.getFullText().indexOf(GENERATED_WARNING) >= 0) {
        sourceFile.delete();
    }
    else {
        console.warn(sourceFile.getFilePath() + " is named like a guard file, but does not contain the generated header. Consider removing or renaming the file, or change the guardFileName setting.");
    }
}
// https://github.com/dsherret/ts-simple-ast/issues/108#issuecomment-342665874
function isClassType(type) {
    var e_1, _a;
    if (type.getConstructSignatures().length > 0) {
        return true;
    }
    var symbol = type.getSymbol();
    if (symbol == null) {
        return false;
    }
    try {
        for (var _b = __values(symbol.getDeclarations()), _c = _b.next(); !_c.done; _c = _b.next()) {
            var declaration = _c.value;
            if (ts_morph_1.Node.isClassDeclaration(declaration)) {
                return true;
            }
            if (ts_morph_1.Node.isVariableDeclaration(declaration) &&
                declaration.getType().getConstructSignatures().length > 0) {
                return true;
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return false;
}
function isReadonlyArrayType(type) {
    var symbol = type.getSymbol();
    if (symbol === undefined) {
        return false;
    }
    return (symbol.getName() === 'ReadonlyArray' && type.getTypeArguments().length === 1);
}
function getReadonlyArrayType(type) {
    return type.getTypeArguments()[0];
}
function getTypeGuardName(child, options) {
    var e_2, _a, e_3, _b;
    var _c;
    var jsDocs = child.getJsDocs();
    try {
        for (var jsDocs_1 = __values(jsDocs), jsDocs_1_1 = jsDocs_1.next(); !jsDocs_1_1.done; jsDocs_1_1 = jsDocs_1.next()) {
            var doc = jsDocs_1_1.value;
            try {
                for (var _d = (e_3 = void 0, __values(doc.getInnerText().split('\n'))), _e = _d.next(); !_e.done; _e = _d.next()) {
                    var line = _e.value;
                    var match = line
                        .trim()
                        .match(/@see\s+(?:{\s*(@link\s*)?(\w+)\s*}\s+)?ts-auto-guard:([^\s]*)/);
                    if (match !== null) {
                        var _f = __read(match, 4), typeGuardName = _f[2], command = _f[3];
                        if (command !== 'type-guard') {
                            reportError("command " + command + " is not supported!");
                            return null;
                        }
                        return typeGuardName;
                    }
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_e && !_e.done && (_b = _d.return)) _b.call(_d);
                }
                finally { if (e_3) throw e_3.error; }
            }
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (jsDocs_1_1 && !jsDocs_1_1.done && (_a = jsDocs_1.return)) _a.call(jsDocs_1);
        }
        finally { if (e_2) throw e_2.error; }
    }
    if (options.exportAll) {
        var t = child.getType();
        var symbols = [child, t.getSymbol(), t.getAliasSymbol()];
        // type aliases have type __type sometimes
        var name = (_c = symbols
            .filter(function (x) { return x && x.getName() !== '__type'; })[0]) === null || _c === void 0 ? void 0 : _c.getName();
        if (name) {
            return 'is' + name;
        }
    }
    return null;
}
// -- Main program --
function ors() {
    var statements = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        statements[_i] = arguments[_i];
    }
    return parens(statements.join(' || \n'));
}
function ands() {
    var statements = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        statements[_i] = arguments[_i];
    }
    return statements.join(' && \n');
}
function eq(a, b) {
    return a + " === " + b;
}
function ne(a, b) {
    return a + " !== " + b;
}
function typeOf(varName, type) {
    return eq("typeof " + varName, "\"" + type + "\"");
}
function typeUnionConditions(varName, types, addDependency, project, path, arrayDepth, records, outFile, options) {
    var conditions = [];
    conditions.push.apply(conditions, __spread(types
        .map(function (type) {
        return typeConditions(varName, type, addDependency, project, path, arrayDepth, true, records, outFile, options);
    })
        .filter(function (v) { return v !== null; })));
    return ors.apply(void 0, __spread(conditions));
}
function typeIntersectionConditions(varName, types, addDependency, project, path, arrayDepth, records, outFile, options) {
    var conditions = [];
    conditions.push.apply(conditions, __spread(types
        .map(function (type) {
        return typeConditions(varName, type, addDependency, project, path, arrayDepth, true, records, outFile, options);
    })
        .filter(function (v) { return v !== null; })));
    return ands.apply(void 0, __spread(conditions));
}
function parens(code) {
    return "(" + code + ")";
}
function arrayCondition(varName, arrayType, addDependency, project, path, arrayDepth, records, outFile, options) {
    if (arrayType.getText() === 'never') {
        return ands("Array.isArray(" + varName + ")", eq(varName + ".length", '0'));
    }
    var indexIdentifier = "i" + arrayDepth;
    var elementPath = path + "[${" + indexIdentifier + "}]";
    var conditions = typeConditions('e', arrayType, addDependency, project, elementPath, arrayDepth + 1, true, records, outFile, options);
    if (conditions === null) {
        return "Array.isArray(" + varName + ")";
    }
    // Bit of a hack, just check if the second argument is used before actually
    // creating it. This avoids unused parameter errors.
    var secondArg = conditions.includes(elementPath)
        ? ", " + indexIdentifier + ": number"
        : '';
    return ands("Array.isArray(" + varName + ")", varName + ".every((e: any" + secondArg + ") =>\n" + conditions + "\n)");
}
function objectTypeCondition(varName, callable) {
    return callable
        ? typeOf(varName, 'function')
        : ors(ands(ne(varName, 'null'), typeOf(varName, 'object')), typeOf(varName, 'function'));
}
function objectCondition(varName, type, addDependency, project, path, arrayDepth, records, outFile, options) {
    var _a, _b;
    var conditions = [];
    var symbol = type.getSymbol();
    if (symbol === undefined) {
        // I think this is happening when the type is declare in a node module.
        // tslint:disable-next-line:no-console
        console.error("Unable to get symbol for type " + type.getText());
        return typeOf(varName, 'object');
    }
    var declarations = symbol.getDeclarations();
    // TODO: https://github.com/rhys-vdw/ts-auto-guard/issues/29
    var declaration = declarations[0];
    if (declaration === undefined) {
        reportError("Couldn't find declaration for type " + type.getText());
        return null;
    }
    var callable = type.getCallSignatures().length !== 0;
    if (callable) {
        // emit warning
        var suppressComment = 'ts-auto-guard-suppress function-type';
        var commentsBefore = declaration.getLeadingCommentRanges();
        var commentBefore = commentsBefore[commentsBefore.length - 1];
        if (commentBefore === undefined ||
            !commentBefore.getText().includes(suppressComment)) {
            console.warn("\nIt seems that " + varName + " has a function type.\nNote that it is impossible to check if a function has the correct signature and return type at runtime.\nTo disable this warning, put comment \"" + suppressComment + "\" before the declaration.\n");
        }
    }
    if (type.isInterface()) {
        if (!ts_morph_1.Node.isInterfaceDeclaration(declaration)) {
            throw new TypeError('Extected declaration to be an interface declaration!');
        }
        declaration.getBaseTypes().forEach(function (baseType) {
            var condition = typeConditions(varName, baseType, addDependency, project, path, arrayDepth, true, records, outFile, options);
            if (condition !== null) {
                conditions.push(condition);
            }
        });
        if (conditions.length === 0) {
            conditions.push(objectTypeCondition(varName, callable));
        }
        // getProperties does not include methods like `foo(): void`
        var properties = __spread(declaration.getProperties(), declaration.getMethods()).map(function (p) { return ({ name: p.getName(), type: p.getType() }); });
        conditions.push.apply(conditions, __spread(propertiesConditions(varName, properties, addDependency, project, path, arrayDepth, records, outFile, options)));
        var indexSignatures = declaration
            .getIndexSignatures()
            .map(function (p) { return ({ keyType: p.getKeyType(), type: p.getReturnType() }); });
        if (indexSignatures.length) {
            conditions.push(indexSignaturesCondition(varName, indexSignatures, properties, addDependency, project, path, arrayDepth, records, outFile, options));
        }
    }
    else {
        conditions.push(objectTypeCondition(varName, callable));
        // Get object literal properties...
        try {
            var properties = type.getProperties();
            var typeDeclarations_1 = (_a = type.getSymbol()) === null || _a === void 0 ? void 0 : _a.getDeclarations();
            var propertySignatures = properties.map(function (p) {
                var propertyDeclarations = p.getDeclarations();
                var typeAtLocation = propertyDeclarations.length !== 0
                    ? p.getTypeAtLocation(propertyDeclarations[0])
                    : p.getTypeAtLocation((typeDeclarations_1 || [])[0]);
                return {
                    name: p.getName(),
                    type: typeAtLocation,
                };
            });
            conditions.push.apply(conditions, __spread(propertiesConditions(varName, propertySignatures, addDependency, project, path, arrayDepth, records, outFile, options)));
            var typeArguments = type.getAliasTypeArguments();
            if (((_b = type.getAliasSymbol()) === null || _b === void 0 ? void 0 : _b.getName()) === 'Record' &&
                typeArguments.length === 2) {
                conditions.push(indexSignaturesCondition(varName, [{ keyType: typeArguments[0], type: typeArguments[1] }], propertySignatures, addDependency, project, path, arrayDepth, records, outFile, options));
            }
        }
        catch (error) {
            if (error instanceof TypeError) {
                // see https://github.com/dsherret/ts-simple-ast/issues/397
                reportError("Internal ts-simple-ast error for " + type.getText(), error);
            }
        }
    }
    return ands.apply(void 0, __spread(conditions));
}
function tupleCondition(varName, type, addDependency, project, path, arrayDepth, records, outFile, options) {
    var types = type.getTupleElements();
    var conditions = types.reduce(function (acc, elementType, i) {
        var condition = typeConditions(varName + "[" + i + "]", elementType, addDependency, project, path, arrayDepth, true, records, outFile, options);
        if (condition !== null) {
            acc.push(condition);
        }
        return acc;
    }, ["Array.isArray(" + varName + ")"]);
    return ands.apply(void 0, __spread(conditions));
}
function literalCondition(varName, type, addDependency) {
    if (type.isEnumLiteral()) {
        var node = type
            .getSymbol()
            .getDeclarations()
            .find(ts_morph_1.Node.isEnumMember)
            .getParent();
        if (node === undefined) {
            reportError("Couldn't find enum literal parent");
            return null;
        }
        if (!ts_morph_1.Node.isEnumDeclaration(node)) {
            reportError('Enum literal parent was not an enum declaration');
            return null;
        }
        typeToDependency(type, addDependency);
        // type.getText() returns incorrect module name for some reason
        return eq(varName, node.getSymbol().getName() + "." + type.getSymbol().getName());
    }
    return eq(varName, type.getText());
}
function reusedCondition(type, records, outFile, addDependency, varName) {
    var record = records.find(function (x) { return x.typeDeclaration.getType() === type; });
    if (record) {
        if (record.outFile !== outFile) {
            addDependency(record.outFile, record.guardName, false);
        }
        return record.guardName + "(" + varName + ") as boolean";
    }
    return null;
}
function typeConditions(varName, type, addDependency, project, path, arrayDepth, useGuard, records, outFile, options) {
    var reused = reusedCondition(type, records, outFile, addDependency, varName);
    if (useGuard && reused) {
        return reused;
    }
    if (type.isNull()) {
        return eq(varName, 'null');
    }
    if (type.getText() === 'any' || type.getText() === 'unknown') {
        return null;
    }
    if (type.getText() === 'never') {
        return typeOf(varName, 'undefined');
    }
    if (type.isBoolean()) {
        return typeOf(varName, 'boolean');
    }
    if (type.isUnion()) {
        // Seems to be bug here where enums can only be detected with enum
        // literal + union check... odd.
        if (type.isEnumLiteral()) {
            typeToDependency(type, addDependency);
        }
        return typeUnionConditions(varName, type.getUnionTypes(), addDependency, project, path, arrayDepth, records, outFile, options);
    }
    if (type.isIntersection()) {
        return typeIntersectionConditions(varName, type.getIntersectionTypes(), addDependency, project, path, arrayDepth, records, outFile, options);
    }
    if (type.isArray()) {
        return arrayCondition(varName, type.getArrayElementType(), addDependency, project, path, arrayDepth, records, outFile, options);
    }
    if (isReadonlyArrayType(type)) {
        return arrayCondition(varName, getReadonlyArrayType(type), addDependency, project, path, arrayDepth, records, outFile, options);
    }
    if (isClassType(type)) {
        typeToDependency(type, addDependency);
        return varName + " instanceof " + type.getSymbol().getName();
    }
    if (type.isTuple()) {
        return tupleCondition(varName, type, addDependency, project, path, arrayDepth, records, outFile, options);
    }
    if (type.isObject()) {
        return objectCondition(varName, type, addDependency, project, path, arrayDepth, records, outFile, options);
    }
    if (type.isLiteral()) {
        return literalCondition(varName, type, addDependency);
    }
    return typeOf(varName, type.getText());
}
function propertyConditions(objName, property, addDependency, project, path, arrayDepth, records, outFile, options) {
    var debug = options.debug;
    var propertyName = property.name;
    // can't start with a number (\d) and then only consists of letters, numbers and the underscore (\w)
    var validPropertyNameRegex = /^(?!\d)\w+$/;
    var isIdentifier = validPropertyNameRegex.test(propertyName);
    var strippedName = propertyName.replace(/"/g, '');
    var varName = isIdentifier
        ? objName + "." + propertyName
        : objName + "[\"" + strippedName + "\"]";
    var propertyPath = isIdentifier
        ? path + "." + propertyName
        : path + "[\"" + strippedName + "\"]";
    var expectedType = property.type.getText();
    var conditions = typeConditions(varName, property.type, addDependency, project, propertyPath, arrayDepth, true, records, outFile, options);
    if (debug) {
        if (expectedType.indexOf('import') > -1) {
            expectedType = expectedType.replace(process.cwd(), '.');
        }
        return (conditions &&
            "evaluate(" + conditions + ", `" + propertyPath + "`, " + JSON.stringify(expectedType) + ", " + varName + ")");
    }
    return conditions;
}
function propertiesConditions(varName, properties, addDependency, project, path, arrayDepth, records, outFile, options) {
    return properties
        .map(function (prop) {
        return propertyConditions(varName, prop, addDependency, project, path, arrayDepth, records, outFile, options);
    })
        .filter(function (v) { return v !== null; });
}
function indexSignatureConditions(objName, keyName, valueUsed, keyUsed, index, addDependency, project, path, arrayDepth, records, outFile, options) {
    var debug = options.debug;
    var expectedType = index.type.getText();
    var expectedKeyType = index.keyType.getText();
    var conditions = typeConditions(objName, index.type, addDependency, project, path + " " + objName, arrayDepth, true, records, outFile, options);
    var keyConditions = typeConditions(keyName, index.keyType, addDependency, project, path + " " + keyName, arrayDepth, true, records, outFile, options);
    if (conditions) {
        valueUsed();
    }
    if (keyConditions) {
        keyUsed();
    }
    if (debug) {
        var cleanKeyReplacer = '${key.toString().replace(/"/g, \'\\\\"\')}';
        var evaluation = conditions &&
            "evaluate(" + conditions + ", `" + path + "[\"" + cleanKeyReplacer + "\"]`, " + JSON.stringify(expectedType) + ", " + objName + ")";
        var keyEvaluation = keyConditions &&
            "evaluate(" + keyConditions + ", `" + path + " (key: \"" + cleanKeyReplacer + "\")`, " + JSON.stringify(expectedKeyType) + ", " + keyName + ")";
        if (evaluation || keyEvaluation) {
            keyUsed();
        }
        if (evaluation && keyEvaluation) {
            return ands(evaluation, keyEvaluation);
        }
        return evaluation || keyEvaluation;
    }
    if (conditions && keyConditions) {
        return ands(conditions, keyConditions);
    }
    // If we don't have both try and return one, or null if neither
    return conditions || keyConditions;
}
function indexSignaturesCondition(varName, indexSignatures, properties, addDependency, project, path, arrayDepth, records, outFile, options) {
    var valuePrefix = '_';
    var valueUsed = function () {
        valuePrefix = '';
    };
    var keyPrefix = '_';
    var keyUsed = function () {
        keyPrefix = '';
    };
    var conditions = ors.apply(void 0, __spread(indexSignatures
        .map(function (indexSignature) {
        return indexSignatureConditions('value', 'key', valueUsed, keyUsed, indexSignature, addDependency, project, path, arrayDepth, records, outFile, options);
    })
        .filter(function (v) { return v !== null; })));
    var staticKeysFilter = properties.length
        ? "\n    .filter(([key]) => ![" + properties
            .map(function (_a) {
            var name = _a.name;
            return "\"" + name + "\"";
        })
            .join(',') + "].includes(key))"
        : '';
    return "Object.entries<any>(" + varName + ")" + staticKeysFilter + "\n    .every(([" + keyPrefix + "key, " + valuePrefix + "value]) => " + conditions + ")";
}
function generateTypeGuard(functionName, typeDeclaration, addDependency, project, records, outFile, options) {
    var debug = options.debug, shortCircuitCondition = options.shortCircuitCondition;
    var typeName = typeDeclaration.getName();
    var defaultArgumentName = lowerFirst(typeName);
    var conditions = typeConditions('obj', typeDeclaration.getType(), addDependency, project, '${argumentName}', // tslint:disable-line:no-invalid-template-strings
    0, false, records, outFile, options);
    var secondArgument = debug
        ? "argumentName: string = \"" + defaultArgumentName + "\""
        : "_argumentName?: string";
    var signature = "export function " + functionName + "(obj: any, " + secondArgument + "): obj is " + typeName + " {\n";
    var shortCircuit = shortCircuitCondition
        ? "if (" + shortCircuitCondition + ") return true\n"
        : '';
    return [
        signature,
        shortCircuit,
        "return (\n" + (conditions || true) + "\n)\n}\n",
    ].join('');
}
function createAddDependency(dependencies) {
    return function addDependency(sourceFile, name, isDefault) {
        var alias = name;
        if (isDefault) {
            name = 'default';
        }
        var imports = dependencies.get(sourceFile);
        if (imports === undefined) {
            imports = {};
            dependencies.set(sourceFile, imports);
        }
        var previousAlias = imports[name];
        if (previousAlias !== undefined && previousAlias !== alias) {
            reportError("Conflicting export alias for \"" + sourceFile.getFilePath() + "\": \"" + alias + "\" vs \"" + previousAlias + "\"");
        }
        imports[name] = alias;
    };
}
var evaluateFunction = "function evaluate(\n  isCorrect: boolean,\n  varName: string,\n  expected: string,\n  actual: any\n): boolean {\n  if (!isCorrect) {\n    console.error(\n      `${varName} type mismatch, expected: ${expected}, found:`,\n      actual\n    )\n  }\n  return isCorrect\n}\n";
function generate(_a) {
    var _b = _a.paths, paths = _b === void 0 ? [] : _b, tsConfigFilePath = _a.project, processOptions = _a.processOptions;
    return __awaiter(this, void 0, void 0, function () {
        var project;
        return __generator(this, function (_c) {
            project = new ts_morph_1.Project({
                skipAddingFilesFromTsConfig: paths.length !== 0,
                tsConfigFilePath: tsConfigFilePath,
            });
            project.addSourceFilesAtPaths(paths);
            processProject(project, processOptions);
            return [2 /*return*/, project.save()];
        });
    });
}
exports.generate = generate;
function processProject(project, options) {
    if (options === void 0) { options = { debug: false }; }
    var guardFileName = options.guardFileName || 'guard';
    if (guardFileName.match(/[*/]/))
        throw new Error('guardFileName must not contain special characters');
    // Delete previously generated guard.
    project
        .getSourceFiles("./**/*." + guardFileName + ".ts")
        .forEach(function (sourceFile) { return deleteGuardFile(sourceFile); });
    var sourceFiles = project.getSourceFiles();
    // Sort source files by dependencies - dependencies before dependants
    var orderedSourceFiles = [];
    var orderSourceFileByDependencies = function (sourceFile, visitedFiles) {
        if (visitedFiles === void 0) { visitedFiles = []; }
        // Ignore if already added as a dependency of another, or if we hit a cyclical import
        if (orderedSourceFiles.includes(sourceFile) ||
            visitedFiles.includes(sourceFile)) {
            return;
        }
        var childVisitedFiles = __spread(visitedFiles, [sourceFile]);
        // Add all dependencies to the ordered list first (if they have beeen specified and have not already been added)
        sourceFile.getImportDeclarations().forEach(function (importDeclaration) {
            var importSourceFile = importDeclaration.getModuleSpecifierSourceFile();
            if (importSourceFile &&
                sourceFiles.includes(importSourceFile) &&
                !orderedSourceFiles.includes(importSourceFile)) {
                orderSourceFileByDependencies(importSourceFile, childVisitedFiles);
            }
        });
        // Add this one to the ordered list
        orderedSourceFiles.push(sourceFile);
    };
    sourceFiles.forEach(function (sourceFile) { return orderSourceFileByDependencies(sourceFile); });
    // Generate new guard files.
    var records = [];
    orderedSourceFiles.forEach(function (sourceFile) {
        var e_4, _a, e_5, _b, e_6, _c, e_7, _d, e_8, _e;
        var dependencies = new Map();
        var addDependency = createAddDependency(dependencies);
        var functions = [];
        var exports = Array.from(sourceFile.getExportedDeclarations().values());
        var allTypesDeclarations = [];
        try {
            for (var exports_1 = __values(exports), exports_1_1 = exports_1.next(); !exports_1_1.done; exports_1_1 = exports_1.next()) {
                var exp = exports_1_1.value;
                try {
                    for (var exp_1 = (e_5 = void 0, __values(exp)), exp_1_1 = exp_1.next(); !exp_1_1.done; exp_1_1 = exp_1.next()) {
                        var singleExport = exp_1_1.value;
                        if (ts_morph_1.Node.isTypeAliasDeclaration(singleExport) ||
                            ts_morph_1.Node.isInterfaceDeclaration(singleExport) ||
                            ts_morph_1.Node.isEnumDeclaration(singleExport)) {
                            allTypesDeclarations.push(singleExport);
                        }
                    }
                }
                catch (e_5_1) { e_5 = { error: e_5_1 }; }
                finally {
                    try {
                        if (exp_1_1 && !exp_1_1.done && (_b = exp_1.return)) _b.call(exp_1);
                    }
                    finally { if (e_5) throw e_5.error; }
                }
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (exports_1_1 && !exports_1_1.done && (_a = exports_1.return)) _a.call(exports_1);
            }
            finally { if (e_4) throw e_4.error; }
        }
        var outFile = project.createSourceFile(outFilePath(sourceFile.getFilePath(), guardFileName), '', { overwrite: true });
        try {
            for (var allTypesDeclarations_1 = __values(allTypesDeclarations), allTypesDeclarations_1_1 = allTypesDeclarations_1.next(); !allTypesDeclarations_1_1.done; allTypesDeclarations_1_1 = allTypesDeclarations_1.next()) {
                var typeDeclaration = allTypesDeclarations_1_1.value;
                var typeGuardName = getTypeGuardName(typeDeclaration, options);
                if (typeGuardName !== null) {
                    records.push({ guardName: typeGuardName, typeDeclaration: typeDeclaration, outFile: outFile });
                }
            }
        }
        catch (e_6_1) { e_6 = { error: e_6_1 }; }
        finally {
            try {
                if (allTypesDeclarations_1_1 && !allTypesDeclarations_1_1.done && (_c = allTypesDeclarations_1.return)) _c.call(allTypesDeclarations_1);
            }
            finally { if (e_6) throw e_6.error; }
        }
        try {
            for (var allTypesDeclarations_2 = __values(allTypesDeclarations), allTypesDeclarations_2_1 = allTypesDeclarations_2.next(); !allTypesDeclarations_2_1.done; allTypesDeclarations_2_1 = allTypesDeclarations_2.next()) {
                var typeDeclaration = allTypesDeclarations_2_1.value;
                var typeGuardName = getTypeGuardName(typeDeclaration, options);
                if (typeGuardName !== null) {
                    functions.push(generateTypeGuard(typeGuardName, typeDeclaration, addDependency, project, records, outFile, options));
                    addDependency(sourceFile, typeDeclaration.getName(), typeDeclaration.isDefaultExport());
                }
            }
        }
        catch (e_7_1) { e_7 = { error: e_7_1 }; }
        finally {
            try {
                if (allTypesDeclarations_2_1 && !allTypesDeclarations_2_1.done && (_d = allTypesDeclarations_2.return)) _d.call(allTypesDeclarations_2);
            }
            finally { if (e_7) throw e_7.error; }
        }
        if (functions.length > 0) {
            if (options.debug) {
                functions.unshift(evaluateFunction);
            }
            outFile.addStatements(functions.join('\n'));
            // Memoize imports within local source file
            var importsMap_1 = new Map();
            var _loop_1 = function (impDeclaration) {
                impDeclaration.getNamedImports().forEach(function (impSpecifier) {
                    importsMap_1.set(impSpecifier.getText(), impDeclaration.getModuleSpecifierValue());
                });
            };
            try {
                for (var _f = __values(sourceFile.getImportDeclarations()), _g = _f.next(); !_g.done; _g = _f.next()) {
                    var impDeclaration = _g.value;
                    _loop_1(impDeclaration);
                }
            }
            catch (e_8_1) { e_8 = { error: e_8_1 }; }
            finally {
                try {
                    if (_g && !_g.done && (_e = _f.return)) _e.call(_f);
                }
                finally { if (e_8) throw e_8.error; }
            }
            outFile.addImportDeclarations(Array.from(dependencies.entries()).reduce(function (structures, _a) {
                var _b = __read(_a, 2), importFile = _b[0], imports = _b[1];
                if (outFile === importFile) {
                    return structures;
                }
                var moduleSpecifier = outFile.getRelativePathAsModuleSpecifierTo(importFile);
                if (importFile.isInNodeModules()) {
                    // Packages within node_modules should not be referenced via relative path
                    for (var im in imports) {
                        var importDeclaration = importsMap_1.get(im);
                        if (importDeclaration) {
                            moduleSpecifier = importDeclaration;
                        }
                    }
                }
                var defaultImport = imports.default;
                delete imports.default;
                var namedImports = Object.entries(imports).map(function (_a) {
                    var _b = __read(_a, 2), alias = _b[0], name = _b[1];
                    return alias === name ? name : { name: name, alias: alias };
                });
                structures.push({
                    defaultImport: defaultImport,
                    kind: ts_morph_1.StructureKind.ImportDeclaration,
                    moduleSpecifier: moduleSpecifier,
                    namedImports: namedImports,
                });
                return structures;
            }, []));
            var path = outFile.getRelativePathTo(sourceFile);
            outFile.insertStatements(0, [
                "/*",
                " * Generated type guards for \"" + path + "\".",
                " * " + GENERATED_WARNING,
                " */",
            ].join('\n'));
            if (options.importGuards) {
                var relativeOutPath = './' +
                    outFile
                        .getFilePath()
                        .split('/')
                        .reverse()[0]
                        .replace(/\.(ts|tsx|d\.ts)$/, '');
                var importStatement = "import * as " + options.importGuards + " from \"" + relativeOutPath + "\";";
                var exportStatement = "export { " + options.importGuards + " };";
                var _h = sourceFile.getStatements().reduce(function (reduced, node) {
                    var nodeText = node.getText().replace(/\s{2,}/g, ' ');
                    reduced.hasImport || (reduced.hasImport = nodeText.includes("import * as " + options.importGuards));
                    reduced.hasExport || (reduced.hasExport = nodeText.includes("export { " + options.importGuards + " }"));
                    reduced.statements += 1;
                    return reduced;
                }, { hasImport: false, hasExport: false, statements: 0 }), hasImport = _h.hasImport, hasExport = _h.hasExport, statements = _h.statements;
                if (!hasImport) {
                    sourceFile.insertStatements(0, importStatement);
                }
                if (!hasExport && !options.preventExportImported) {
                    sourceFile.insertStatements(!hasImport ? statements + 1 : statements, exportStatement);
                }
            }
            outFile.formatText();
        }
        else {
            // This guard file is empty. We did not know that until after the file was created, but at least we can clean it up.
            outFile.delete();
        }
    });
}
exports.processProject = processProject;
//# sourceMappingURL=index.js.map