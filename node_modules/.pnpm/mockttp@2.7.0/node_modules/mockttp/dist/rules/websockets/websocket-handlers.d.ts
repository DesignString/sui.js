/// <reference types="node" />
import net = require('net');
import { ClientServerChannel } from "../../util/serialization";
import { OngoingRequest } from "../../types";
import { CloseConnectionHandler, TimeoutHandler } from '../requests/request-handlers';
import { RuleParameters } from '../rule-parameters';
import { PassThroughWebSocketHandlerDefinition, PassThroughWebSocketHandlerOptions, SerializedPassThroughWebSocketData, WebSocketHandlerDefinition, WsHandlerDefinitionLookup } from './websocket-handler-definitions';
export interface WebSocketHandler extends WebSocketHandlerDefinition {
    handle(request: OngoingRequest, socket: net.Socket, head: Buffer): Promise<void>;
}
export { PassThroughWebSocketHandlerOptions };
export declare class PassThroughWebSocketHandler extends PassThroughWebSocketHandlerDefinition {
    private wsServer?;
    private _trustedCACertificates;
    private trustedCACertificates;
    private _cacheableLookupInstance;
    private lookup;
    private initializeWsServer;
    handle(req: OngoingRequest, socket: net.Socket, head: Buffer): Promise<void>;
    private connectUpstream;
    /**
     * @internal
     */
    static deserialize(data: SerializedPassThroughWebSocketData, channel: ClientServerChannel, ruleParams: RuleParameters): any;
}
export { CloseConnectionHandler, TimeoutHandler };
export declare const WsHandlerLookup: typeof WsHandlerDefinitionLookup;
