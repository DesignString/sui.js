"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WsHandlerLookup = exports.TimeoutHandler = exports.CloseConnectionHandler = exports.PassThroughWebSocketHandler = void 0;
const _ = require("lodash");
const url = require("url");
const tls = require("tls");
const WebSocket = require("ws");
const cacheable_lookup_1 = require("cacheable-lookup");
const serialization_1 = require("../../util/serialization");
const request_handlers_1 = require("../requests/request-handlers");
Object.defineProperty(exports, "CloseConnectionHandler", { enumerable: true, get: function () { return request_handlers_1.CloseConnectionHandler; } });
Object.defineProperty(exports, "TimeoutHandler", { enumerable: true, get: function () { return request_handlers_1.TimeoutHandler; } });
const request_utils_1 = require("../../util/request-utils");
const buffer_utils_1 = require("../../util/buffer-utils");
const socket_util_1 = require("../../util/socket-util");
const fs_1 = require("../../util/fs");
const http_agents_1 = require("../http-agents");
const rule_parameters_1 = require("../rule-parameters");
const passthrough_handling_1 = require("../passthrough-handling");
const websocket_handler_definitions_1 = require("./websocket-handler-definitions");
function isOpen(socket) {
    return socket.readyState === WebSocket.OPEN;
}
// Based on ws's validation.js
function isValidStatusCode(code) {
    return ( // Standard code:
    code >= 1000 &&
        code <= 1014 &&
        code !== 1004 &&
        code !== 1005 &&
        code !== 1006) || ( // Application-specific code:
    code >= 3000 && code <= 4999);
}
const INVALID_STATUS_REGEX = /Invalid WebSocket frame: invalid status code (\d+)/;
function pipeWebSocket(inSocket, outSocket) {
    const onPipeFailed = (op) => (err) => {
        if (!err)
            return;
        inSocket.close();
        console.error(`Websocket ${op} failed`, err);
    };
    inSocket.on('message', (msg) => {
        if (isOpen(outSocket)) {
            outSocket.send(msg, onPipeFailed('message'));
        }
    });
    inSocket.on('close', (num, reason) => {
        if (isValidStatusCode(num)) {
            try {
                outSocket.close(num, reason);
            }
            catch (e) {
                console.warn(e);
                outSocket.close();
            }
        }
        else {
            outSocket.close();
        }
    });
    inSocket.on('ping', (data) => {
        if (isOpen(outSocket))
            outSocket.ping(data, undefined, onPipeFailed('ping'));
    });
    inSocket.on('pong', (data) => {
        if (isOpen(outSocket))
            outSocket.pong(data, undefined, onPipeFailed('pong'));
    });
    // If either socket has an general error (connection failure, but also could be invalid WS
    // frames) then we kill the raw connection upstream to simulate a generic connection error:
    inSocket.on('error', (err) => {
        console.log(`Error in proxied WebSocket:`, err);
        const rawOutSocket = outSocket;
        if (err.message.match(INVALID_STATUS_REGEX)) {
            const status = parseInt(INVALID_STATUS_REGEX.exec(err.message)[1]);
            // Simulate errors elsewhere by messing with ws internals. This may break things,
            // that's effectively on purpose: we're simulating the client going wrong:
            const buf = Buffer.allocUnsafe(2);
            buf.writeUInt16BE(status); // status comes from readUInt16BE, so always fits
            rawOutSocket._sender.doClose(buf, true, () => {
                rawOutSocket._socket.destroy();
            });
        }
        else {
            // Unknown error, just kill the connection with no explanation
            rawOutSocket._socket.destroy();
        }
    });
}
function mirrorRejection(socket, rejectionResponse) {
    return __awaiter(this, void 0, void 0, function* () {
        if (socket.writable) {
            const { statusCode, statusMessage, headers } = rejectionResponse;
            socket.write(`HTTP/1.1 ${statusCode} ${statusMessage}\r\n` +
                _.map(headers, (value, key) => `${key}: ${value}`).join('\r\n') +
                '\r\n\r\n');
            const body = yield (0, buffer_utils_1.streamToBuffer)(rejectionResponse);
            if (socket.writable)
                socket.write(body);
        }
        socket.destroy();
    });
}
class PassThroughWebSocketHandler extends websocket_handler_definitions_1.PassThroughWebSocketHandlerDefinition {
    trustedCACertificates() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.extraCACertificates.length)
                return undefined;
            if (!this._trustedCACertificates) {
                this._trustedCACertificates = Promise.all(tls.rootCertificates
                    .concat(this.extraCACertificates.map(certObject => {
                    if ('cert' in certObject) {
                        return certObject.cert.toString('utf8');
                    }
                    else {
                        return (0, fs_1.readFile)(certObject.certPath, 'utf8');
                    }
                })));
            }
            return this._trustedCACertificates;
        });
    }
    lookup() {
        if (!this.lookupOptions)
            return undefined;
        if (!this._cacheableLookupInstance) {
            this._cacheableLookupInstance = new cacheable_lookup_1.default({
                maxTtl: this.lookupOptions.maxTtl,
                errorTtl: this.lookupOptions.errorTtl,
                // As little caching of "use the fallback server" as possible:
                fallbackDuration: 0
            });
            if (this.lookupOptions.servers) {
                this._cacheableLookupInstance.servers = this.lookupOptions.servers;
            }
        }
        return this._cacheableLookupInstance.lookup;
    }
    initializeWsServer() {
        if (this.wsServer)
            return;
        this.wsServer = new WebSocket.Server({ noServer: true });
        this.wsServer.on('connection', (ws) => {
            pipeWebSocket(ws, ws.upstreamWebSocket);
            pipeWebSocket(ws.upstreamWebSocket, ws);
        });
    }
    handle(req, socket, head) {
        return __awaiter(this, void 0, void 0, function* () {
            this.initializeWsServer();
            let { protocol, hostname, port, path } = url.parse(req.url);
            const headers = req.headers;
            const reqMessage = req;
            const isH2Downstream = (0, request_utils_1.isHttp2)(req);
            const hostHeaderName = isH2Downstream ? ':authority' : 'host';
            if ((0, socket_util_1.isLocalhostAddress)(hostname) && req.remoteIpAddress && !(0, socket_util_1.isLocalhostAddress)(req.remoteIpAddress)) {
                // If we're proxying localhost traffic from another remote machine, then we should really be proxying
                // back to that machine, not back to ourselves! Best example is docker containers: if we capture & inspect
                // their localhost traffic, it should still be sent back into that docker container.
                hostname = req.remoteIpAddress;
                // We don't update the host header - from the POV of the target, it's still localhost traffic.
            }
            if (this.forwarding) {
                const { targetHost, updateHostHeader } = this.forwarding;
                let wsUrl;
                if (!targetHost.includes('/')) {
                    // We're forwarding to a bare hostname, just overwrite that bit:
                    [hostname, port] = targetHost.split(':');
                }
                else {
                    // Forwarding to a full URL; override the host & protocol, but never the path.
                    ({ protocol, hostname, port } = url.parse(targetHost));
                }
                // Connect directly to the forwarding target URL
                wsUrl = `${protocol.replace('http', 'ws')}//${hostname}${port ? ':' + port : ''}${path}`;
                // Optionally update the host header too:
                if (updateHostHeader === undefined || updateHostHeader === true) {
                    // If updateHostHeader is true, or just not specified, match the new target
                    headers[hostHeaderName] = hostname + (port ? `:${port}` : '');
                }
                else if (updateHostHeader) {
                    // If it's an explicit custom value, use that directly.
                    headers[hostHeaderName] = updateHostHeader;
                } // Otherwise: falsey means don't touch it.
                yield this.connectUpstream(wsUrl, reqMessage, headers, socket, head);
            }
            else if (!hostname) { // No hostname in URL means transparent proxy, so use Host header
                const hostHeader = req.headers[hostHeaderName];
                [hostname, port] = hostHeader.split(':');
                // lastHopEncrypted is set in http-combo-server, for requests that have explicitly
                // CONNECTed upstream (which may then up/downgrade from the current encryption).
                if (socket.lastHopEncrypted !== undefined) {
                    protocol = socket.lastHopEncrypted ? 'wss' : 'ws';
                }
                else {
                    protocol = reqMessage.connection.encrypted ? 'wss' : 'ws';
                }
                const wsUrl = `${protocol}://${hostname}${port ? ':' + port : ''}${path}`;
                yield this.connectUpstream(wsUrl, reqMessage, headers, socket, head);
            }
            else {
                // Connect directly according to the specified URL
                const wsUrl = `${protocol.replace('http', 'ws')}//${hostname}${port ? ':' + port : ''}${path}`;
                yield this.connectUpstream(wsUrl, reqMessage, headers, socket, head);
            }
        });
    }
    connectUpstream(wsUrl, req, headers, incomingSocket, head) {
        return __awaiter(this, void 0, void 0, function* () {
            // Initialize the server when we handle the first actual request. Mainly just so we
            // don't try to initialize it in a browser when building rules initially.
            if (!this.wsServer)
                this.wsServer = new WebSocket.Server({ noServer: true });
            // Skip cert checks if the host or host+port are whitelisted
            const parsedUrl = url.parse(wsUrl);
            const checkServerCertificate = !_.includes(this.ignoreHostHttpsErrors, parsedUrl.hostname) &&
                !_.includes(this.ignoreHostHttpsErrors, parsedUrl.host);
            const trustedCerts = yield this.trustedCACertificates();
            const caConfig = trustedCerts
                ? { ca: trustedCerts }
                : {};
            const effectivePort = !!parsedUrl.port
                ? parseInt(parsedUrl.port, 10)
                : parsedUrl.protocol == 'wss:' ? 443 : 80;
            const proxySettingSource = (0, rule_parameters_1.assertParamDereferenced)(this.proxyConfig);
            const agent = yield (0, http_agents_1.getAgent)({
                protocol: parsedUrl.protocol,
                hostname: parsedUrl.hostname,
                port: effectivePort,
                proxySettingSource,
                tryHttp2: false,
                keepAlive: false // Not a thing for websockets: they take over the whole connection
            });
            const upstreamWebSocket = new WebSocket(wsUrl, Object.assign({ maxPayload: 0, agent, lookup: this.lookup(), headers: _.omitBy(headers, (_v, headerName) => headerName.toLowerCase().startsWith('sec-websocket') ||
                    headerName.toLowerCase() === 'connection' ||
                    headerName.toLowerCase() === 'upgrade'), 
                // TLS options:
                ciphers: passthrough_handling_1.MOCKTTP_UPSTREAM_CIPHERS, rejectUnauthorized: checkServerCertificate }, caConfig));
            upstreamWebSocket.once('open', () => {
                // Presumably the below adds an error handler. But what about before we get here?
                this.wsServer.handleUpgrade(req, incomingSocket, head, (ws) => {
                    ws.upstreamWebSocket = upstreamWebSocket;
                    this.wsServer.emit('connection', ws);
                });
            });
            // If the upstream says no, we say no too.
            upstreamWebSocket.on('unexpected-response', (req, res) => {
                console.log(`Unexpected websocket response from ${wsUrl}: ${res.statusCode}`);
                mirrorRejection(incomingSocket, res);
            });
            // If there's some other error, we just kill the socket:
            upstreamWebSocket.on('error', (e) => {
                console.warn(e);
                incomingSocket.end();
            });
            incomingSocket.on('error', () => upstreamWebSocket.close(1011)); // Internal error
        });
    }
    /**
     * @internal
     */
    static deserialize(data, channel, ruleParams) {
        // By default, we assume we just need to assign the right prototype
        return _.create(this.prototype, Object.assign(Object.assign({}, data), { extraCACertificates: data.extraCACertificates || [], proxyConfig: (0, serialization_1.deserializeProxyConfig)(data.proxyConfig, channel, ruleParams), ignoreHostHttpsErrors: data.ignoreHostCertificateErrors }));
    }
}
exports.PassThroughWebSocketHandler = PassThroughWebSocketHandler;
exports.WsHandlerLookup = {
    'ws-passthrough': PassThroughWebSocketHandler,
    'close-connection': request_handlers_1.CloseConnectionHandler,
    'timeout': request_handlers_1.TimeoutHandler
};
//# sourceMappingURL=websocket-handlers.js.map