import { MaybePromise } from "../main";
import { CompletedRequest, Method } from "../types";
import { RuleCompletionChecker } from "./completion-checkers";
import { RequestMatcher } from "./matchers";
/**
 * @class BaseRuleBuilder
 *
 * Defines the base matching & completion methods, used for both normal
 * and websocket request handling, but excluding the handling itself
 * which differs between the two cases.
 */
export declare abstract class BaseRuleBuilder {
    /**
     * Mock rule builders should be constructed through the Mockttp instance you're
     * using, not directly. You shouldn't ever need to call this constructor.
     */
    constructor(method?: Method, path?: string | RegExp);
    protected matchers: RequestMatcher[];
    protected completionChecker?: RuleCompletionChecker;
    /**
     * Match only requests sent to the given host
     * @category Matching
     */
    forHost(host: string): this;
    /**
     * Match only requests that include the given headers.
     * @category Matching
     */
    withHeaders(headers: {
        [key: string]: string;
    }): this;
    /**
     * Match only requests that include the given query parameters.
     * @category Matching
     */
    withQuery(query: {
        [key: string]: string | number | (string | number)[];
    }): this;
    /**
     * Match only requests that include the exact query string provided.
     * The query string must start with a ? or be entirely empty.
     * @category Matching
     */
    withExactQuery(query: string): this;
    /**
     * Match only requests whose bodies include the given form data.
     * @category Matching
     */
    withForm(formData: {
        [key: string]: string;
    }): this;
    /**
     * Match only requests whose bodies either exactly match the given string
     * (if a string is passed) or whose bodies match a regular expression
     * (if a regex is passed).
     * @category Matching
     */
    withBody(content: string | RegExp): this;
    /**
     * Match only requests whose bodies include the given string.
     * @category Matching
     */
    withBodyIncluding(content: string): this;
    /**
     * Match only requests whose bodies exactly match the given
     * object, when parsed as JSON.
     *
     * Note that this only tests that the body can be parsed
     * as JSON - it doesn't require a content-type header.
     * @category Matching
     */
    withJsonBody(json: {}): this;
    /**
     * Match only requests whose bodies match (contain equivalent
     * values, ignoring extra values) the given object, when
     * parsed as JSON. Matching behaviour is the same as Lodash's
     * _.isMatch method.
     *
     * Note that this only tests that the body can be parsed
     * as JSON - it doesn't require a content-type header.
     * @category Matching
     */
    withJsonBodyIncluding(json: {}): this;
    /**
     * Match only requests that include the given cookies
     * @category Matching
     */
    withCookie(cookie: {
        [key: string]: string;
    }): this;
    /**
     * Match only requests when the callback returns true
     * @category Matching
     */
    matching(content: (request: CompletedRequest) => MaybePromise<boolean>): this;
    /**
     * Run this rule forever, for all matching requests
     * @category Completion
     */
    always(): this;
    /**
     * Run this rule only once, for the first matching request
     * @category Completion
     */
    once(): this;
    /**
     * Run this rule twice, for the first two matching requests
     * @category Completion
     */
    twice(): this;
    /**
     * Run this rule three times, for the first three matching requests
     * @category Completion
     */
    thrice(): this;
    /**
     * Run this rule the given number of times, for the first matching requests
     * @category Completion
     */
    times(n: number): this;
}
