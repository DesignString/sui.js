"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isSocketLoop = exports.isLocalhostAddress = exports.isLocalIPv6Available = exports.isLocalPortActive = void 0;
const _ = require("lodash");
const os = require("os");
const net = require("net");
const util_1 = require("./util");
// Test if a local port for a given interface (IPv4/6) is currently in use
function isLocalPortActive(interfaceIp, port) {
    return __awaiter(this, void 0, void 0, function* () {
        if (interfaceIp === '::1' && !exports.isLocalIPv6Available)
            return false;
        return new Promise((resolve) => {
            const server = net.createServer();
            server.listen({
                host: interfaceIp,
                port,
                ipv6Only: interfaceIp === '::1'
            });
            server.once('listening', () => {
                resolve(false);
                server.close(() => { });
            });
            server.once('error', (e) => {
                resolve(true);
            });
        });
    });
}
exports.isLocalPortActive = isLocalPortActive;
// This file imported in browsers etc as it's used in handlers, but none of these methods are used
// directly. It is useful though to guard sections that immediately perform actions:
exports.isLocalIPv6Available = util_1.isNode
    ? _.some(os.networkInterfaces(), (addresses) => _.some(addresses, a => a.address === '::1'))
    : true;
// We need to normalize ips for comparison, because the same ip may be reported as ::ffff:127.0.0.1
// and 127.0.0.1 on the two sides of the connection, for the same ip.
const normalizeIp = (ip) => (ip && ip.startsWith('::ffff:'))
    ? ip.slice('::ffff:'.length)
    : ip;
const isLocalhostAddress = (host) => {
    var _a;
    return host === 'localhost' || // Most common
        host === '::1' || // IPv6
        ((_a = normalizeIp(host)) === null || _a === void 0 ? void 0 : _a.match(/^127\.\d{1,3}\.\d{1,3}\.\d{1,3}$/));
}; // 127.0.0.0/8 range
exports.isLocalhostAddress = isLocalhostAddress;
// Check whether an incoming socket is the other end of one of our outgoing sockets:
const isSocketLoop = (outgoingSockets, incomingSocket) => 
// We effectively just compare the address & port: if they match, we've almost certainly got a loop.
// I don't think it's generally possible to see the same ip on different interfaces from one process (you need
// ip-netns network namespaces), but if it is, then there's a tiny chance of false positives here. If we have ip X,
// and on another interface somebody else has ip X, and they send a request with the same incoming port as an
// outgoing request we have on the other interface, we'll assume it's a loop. Extremely unlikely imo.
_.some([...outgoingSockets], (outgoingSocket) => {
    if (!outgoingSocket.localAddress || !outgoingSocket.localPort) {
        // It's possible for sockets in outgoingSockets to be closed, in which case these properties
        // will be undefined. If so, we know they're not relevant to loops, so skip entirely.
        return false;
    }
    else {
        return normalizeIp(outgoingSocket.localAddress) === normalizeIp(incomingSocket.remoteAddress) &&
            outgoingSocket.localPort === incomingSocket.remotePort;
    }
});
exports.isSocketLoop = isSocketLoop;
//# sourceMappingURL=socket-util.js.map