"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDeferred = exports.objectAllPromise = exports.filter = void 0;
const _ = require("lodash");
function filter(array, test) {
    return __awaiter(this, void 0, void 0, function* () {
        let testResults = yield Promise.all(array.map(test));
        return array.filter((v, i) => testResults[i]);
    });
}
exports.filter = filter;
function objectAllPromise(obj) {
    return __awaiter(this, void 0, void 0, function* () {
        return _.zipObject(Object.keys(obj), yield Promise.all(Object.values(obj)));
    });
}
exports.objectAllPromise = objectAllPromise;
function getDeferred() {
    let resolveCallback;
    let rejectCallback;
    let result = new Promise((resolve, reject) => {
        resolveCallback = resolve;
        rejectCallback = reject;
    });
    result.resolve = resolveCallback;
    result.reject = rejectCallback;
    return result;
}
exports.getDeferred = getDeferred;
//# sourceMappingURL=promise.js.map