"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockttpAdminPlugin = void 0;
const mockttp_server_1 = require("../server/mockttp-server");
const mockttp_admin_model_1 = require("./mockttp-admin-model");
const mockttp_schema_1 = require("./mockttp-schema");
class MockttpAdminPlugin {
    constructor() {
        this.schema = mockttp_schema_1.MockttpSchema;
    }
    start({ port, options }) {
        return __awaiter(this, void 0, void 0, function* () {
            this.mockServer = new mockttp_server_1.MockttpServer(options);
            yield this.mockServer.start(port);
            return {
                port: this.mockServer.port,
                mockRoot: this.mockServer.url
            };
        });
    }
    stop() {
        return this.mockServer.stop();
    }
    reset() {
        return this.mockServer.reset();
    }
    getMockServer() {
        return this.mockServer;
    }
    enableDebug() {
        this.mockServer.enableDebug();
    }
    buildResolvers(stream, ruleParameters) {
        return (0, mockttp_admin_model_1.buildAdminServerModel)(this.mockServer, stream, ruleParameters);
    }
    ;
}
exports.MockttpAdminPlugin = MockttpAdminPlugin;
//# sourceMappingURL=mockttp-admin-plugin.js.map