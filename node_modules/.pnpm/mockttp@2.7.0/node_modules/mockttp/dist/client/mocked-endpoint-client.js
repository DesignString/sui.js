"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockedEndpointClient = void 0;
class MockedEndpointClient {
    constructor(id, explanation, endpointDataGetter) {
        this.id = id;
        this.explanation = explanation;
        this.endpointDataGetter = endpointDataGetter;
    }
    getMockedEndpointData() {
        return __awaiter(this, void 0, void 0, function* () {
            const mockedEndpointData = yield this.endpointDataGetter();
            if (mockedEndpointData === null)
                throw new Error("Can't get seen requests for unknown mocked endpoint");
            else
                return mockedEndpointData;
        });
    }
    getSeenRequests() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.getMockedEndpointData()).seenRequests;
        });
    }
    isPending() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.getMockedEndpointData()).isPending;
        });
    }
    toString() {
        if (this.explanation) {
            return "Mocked endpoint: " + this.explanation;
        }
        else {
            return Object.toString.call(this);
        }
    }
}
exports.MockedEndpointClient = MockedEndpointClient;
//# sourceMappingURL=mocked-endpoint-client.js.map