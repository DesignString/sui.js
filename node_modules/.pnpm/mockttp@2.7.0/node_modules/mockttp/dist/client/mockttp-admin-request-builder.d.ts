import { MockedEndpoint, MockedEndpointData } from "../types";
import type { Serialized } from '../util/serialization';
import { AdminQuery } from './admin-query';
import { SchemaIntrospector } from './schema-introspection';
import type { RequestRuleData } from "../rules/requests/request-rule";
import type { WebSocketRuleData } from '../rules/websockets/websocket-rule';
import { SubscribableEvent } from '../mockttp';
export declare class MockttpAdminRequestBuilder {
    private schema;
    constructor(schema: SchemaIntrospector);
    buildAddRequestRulesQuery(rules: Array<Serialized<RequestRuleData>>, reset: boolean): AdminQuery<{
        endpoints: Array<{
            id: string;
            explanation?: string;
        }>;
    }, MockedEndpoint[]>;
    buildSetFallbackRequestRuleQuery(rule: Serialized<RequestRuleData>): AdminQuery<{
        endpoint: {
            id: string;
            explanation: string;
        };
    }, MockedEndpoint>;
    buildAddWebSocketRulesQuery(rules: Array<Serialized<WebSocketRuleData>>, reset: boolean): AdminQuery<{
        endpoints: Array<{
            id: string;
            explanation?: string;
        }>;
    }, MockedEndpoint[]>;
    buildMockedEndpointsQuery(): AdminQuery<{
        mockedEndpoints: MockedEndpointData[];
    }, MockedEndpoint[]>;
    buildPendingEndpointsQuery(): AdminQuery<{
        pendingEndpoints: MockedEndpointData[];
    }, MockedEndpoint[]>;
    buildSubscriptionRequest<T>(event: SubscribableEvent): AdminQuery<unknown, T>;
    private getEndpointDataGetter;
}
