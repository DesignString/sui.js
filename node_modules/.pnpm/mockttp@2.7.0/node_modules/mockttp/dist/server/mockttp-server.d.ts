import { InitiatedRequest, CompletedRequest, CompletedResponse, TlsRequest, ClientError } from "../types";
import { Mockttp, AbstractMockttp, MockttpOptions, PortRange } from "../mockttp";
import { RequestRuleData } from "../rules/requests/request-rule";
import { ServerMockedEndpoint } from "./mocked-endpoint";
import { WebSocketRuleData } from "../rules/websockets/websocket-rule";
/**
 * A in-process Mockttp implementation. This starts servers on the local machine in the
 * current process, and exposes methods to directly manage them.
 *
 * This class does not work in browsers, as it expects to be able to start HTTP servers.
 */
export declare class MockttpServer extends AbstractMockttp implements Mockttp {
    private requestRules;
    private fallbackRequestRule;
    private webSocketRules;
    private httpsOptions;
    private isHttp2Enabled;
    private maxBodySize;
    private app;
    private server;
    private eventEmitter;
    private readonly initialDebugSetting;
    private readonly defaultWsHandler;
    constructor(options?: MockttpOptions);
    start(portParam?: number | PortRange): Promise<void>;
    stop(): Promise<void>;
    enableDebug(): void;
    reset(): void;
    private get address();
    get url(): string;
    get port(): number;
    setRequestRules: (...ruleData: RequestRuleData[]) => Promise<ServerMockedEndpoint[]>;
    addRequestRules: (...ruleData: RequestRuleData[]) => Promise<ServerMockedEndpoint[]>;
    setFallbackRequestRule: (ruleDatum: RequestRuleData) => Promise<ServerMockedEndpoint>;
    setWebSocketRules: (...ruleData: WebSocketRuleData[]) => Promise<ServerMockedEndpoint[]>;
    addWebSocketRules: (...ruleData: WebSocketRuleData[]) => Promise<ServerMockedEndpoint[]>;
    getMockedEndpoints(): Promise<ServerMockedEndpoint[]>;
    getPendingEndpoints(): Promise<ServerMockedEndpoint[]>;
    getRuleParameterKeys(): Promise<never[]>;
    on(event: 'request-initiated', callback: (req: InitiatedRequest) => void): Promise<void>;
    on(event: 'request', callback: (req: CompletedRequest) => void): Promise<void>;
    on(event: 'response', callback: (req: CompletedResponse) => void): Promise<void>;
    on(event: 'abort', callback: (req: InitiatedRequest) => void): Promise<void>;
    on(event: 'tls-client-error', callback: (req: TlsRequest) => void): Promise<void>;
    on(event: 'tlsClientError', callback: (req: TlsRequest) => void): Promise<void>;
    on(event: 'client-error', callback: (error: ClientError) => void): Promise<void>;
    private announceInitialRequestAsync;
    private announceCompletedRequestAsync;
    private announceResponseAsync;
    private announceAbortAsync;
    private announceTlsErrorAsync;
    private announceClientErrorAsync;
    private preprocessRequest;
    private handleRequest;
    private handleWebSocket;
    private findMatchingRule;
    private getUnmatchedRequestExplanation;
    private sendUnmatchedRequestError;
    private sendWebSocketErrorResponse;
    private explainRequest;
    private suggestRule;
    private handleInvalidHttp1Request;
    private handleInvalidHttp2Request;
}
